# frozen_string_literal: true

module Security
  module Ingestion
    module Tasks
      class IngestVulnerabilityReads
        class Upsert < AbstractTask
          include Gitlab::Ingestion::BulkInsertableTask

          self.model = Vulnerabilities::Read
          self.unique_by = :vulnerability_id

          private

          def attributes
            @attributes ||= finding_maps.filter_map do |finding_map|
              occurrence = finding_map.report_finding
              vulnerability_id = finding_map.vulnerability_id
              vulnerability = vulnerabilities[vulnerability_id]
              {
                vulnerability_id: vulnerability_id,
                project_id: vulnerability.project_id,
                scanner_id: finding_map.scanner_id,
                report_type: vulnerability.report_type,
                severity: vulnerability.severity,
                state: vulnerability.state,
                resolved_on_default_branch: vulnerability.resolved_on_default_branch,
                uuid: occurrence.uuid,
                location_image: vulnerability.location&.dig('image'),
                cluster_agent_id: vulnerability.location&.dig('kubernetes_resource', 'agent_id'),
                casted_cluster_agent_id: vulnerability.location&.dig('kubernetes_resource', 'agent_id')&.to_i,
                has_issues: vulnerability.issue_links.any?,
                has_merge_request: vulnerability.merge_request_links.any?,
                traversal_ids: vulnerability.project.namespace.traversal_ids,
                archived: vulnerability.project.archived,
                identifier_names: occurrence.identifiers.map(&:name),
                owasp_top_10: occurrence.owasp_top_10,
                has_vulnerability_resolution: occurrence.has_vulnerability_resolution?
              }
            end
          end

          def vulnerabilities
            @vulnerabilities ||= Vulnerability.by_ids(vulnerability_ids).with_mrs_and_issue_links
                                              .with_vulnerability_occurrences
                                              .index_by(&:id)
          end

          def vulnerability_ids
            @vulnerability_ids ||= finding_maps.filter_map(&:vulnerability_id)
          end

          def timestamps
            {}
          end
        end
      end
    end
  end
end
