# frozen_string_literal: true

module Security
  module Ingestion
    module Tasks
      class IngestVulnerabilityReads < AbstractTask
        def execute
          project = pipeline&.project

          if should_use_upsert?(project)
            upsert_vulnerability_reads
          else
            update_vulnerability_reads
          end

          finding_maps
        end

        private

        def upsert_vulnerability_reads
          IngestVulnerabilityReads::Upsert.new(pipeline, finding_maps).execute
        end

        def update_vulnerability_reads
          IngestVulnerabilityReads::Update.new(pipeline, finding_maps).execute
        end

        def should_use_upsert?(project)
          if project
            Feature.enabled?(:turn_off_vulnerability_read_create_db_trigger_function, project)
          else
            Feature.enabled?(:turn_off_vulnerability_read_create_db_trigger_function, :instance)
          end
        end
      end
    end
  end
end
